package org.crypttech.modexp.testgenerator.format;

import java.io.FileNotFoundException;
import java.io.PrintWriter;

import org.crypttech.modexp.testgenerator.TestVector;

public class GeneratorC extends ModExpTestFormater {
	public GeneratorC(String file) throws FileNotFoundException {
		super(new PrintWriter(file), true);
		out("#include <stdio.h>");
		out("#include <stdlib.h>");
		out("#include \"montgomery_array.h\"");
		out("#include \"bignum_uint32_t.h\"");
	}

	StringBuilder footer = new StringBuilder();

	@Override
	public void format(TestVector testVector) {
		String testname = ("autogenerated_" + testVector.generator + "_" + testVector.seed)
				.replace("-", "M");
		footer.append("  ").append(testname).append("();").append((char) 10);

		out("void %s(void) {", testname);
		out("  printf(\"=== %s ===\\n\");", testname);
		appendCArray("X", testVector.X);
		appendCArray("E", testVector.E);
		appendCArray("M", testVector.M);
		appendCArray("expected", testVector.expected);
		int[] Z = new int[testVector.length];
		appendCArray("Z", Z);
		out("  mod_exp_array(%s, X, E, M, Z);", testVector.length);
		out("  assertArrayEquals(%d, expected, Z);", testVector.length);
		out("}");
	}

	private void appendCArray(String arrayName, int[] array) {
		StringBuilder sb = new StringBuilder();
		sb.append("  uint32_t ").append(arrayName).append("[] = ");
		sb.append("{ ");
		for (int m : array)
			sb.append(String.format("0x%08x, ", m));
		sb.replace(sb.length() - 2, sb.length(), " };");
		out(sb.toString());
	}

	@Override
	public void close() throws Exception {
		out("void autogenerated_tests(void) {");
		out(footer.toString());
		out("}");
		super.close();
	}

}
